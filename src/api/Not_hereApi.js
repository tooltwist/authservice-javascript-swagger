/**
 * Authservice
 * Authservice.io provides Authentication and Authorisation services for web based applications. It can also maintain user profile information, relationship between users, and assist with communicating with users by email and SMS. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@authservice.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse2001'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse2001'));
  } else {
    // Browser globals (root is window)
    if (!root.Authservice) {
      root.Authservice = {};
    }
    root.Authservice.Not_hereApi = factory(root.Authservice.ApiClient, root.Authservice.InlineResponse2001);
  }
}(this, function(ApiClient, InlineResponse2001) {
  'use strict';

  /**
   * Not_here service.
   * @module api/Not_hereApi
   * @version 2.0.0
   */

  /**
   * Constructs a new Not_hereApi. 
   * @alias module:api/Not_hereApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the searchInventory231 operation.
     * @callback module:api/Not_hereApi~searchInventory231Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the OAuth2 authentication process zzz
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Number} apikey Your APIKEY
     * @param {Number} groupId ID of pet to update
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/Not_hereApi~searchInventory231Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory231 = function(apikey, groupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory231");
      }

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling searchInventory231");
      }


      var pathParams = {
        'apikey': apikey,
        'groupId': groupId
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/getXGroup/get/{groupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory27 operation.
     * @callback module:api/Not_hereApi~searchInventory27Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the OAuth2 authentication process zzz
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Number} apikey Your APIKEY
     * @param {Number} userId ID of pet to update
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/Not_hereApi~searchInventory27Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory27 = function(apikey, userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory27");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling searchInventory27");
      }


      var pathParams = {
        'apikey': apikey,
        'userId': userId
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/getAssociates/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory28 operation.
     * @callback module:api/Not_hereApi~searchInventory28Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the OAuth2 authentication process zzz
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Number} apikey Your APIKEY
     * @param {Number} userId ID of pet to update
     * @param {Number} associateType ID of pet to update
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/Not_hereApi~searchInventory28Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory28 = function(apikey, userId, associateType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory28");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling searchInventory28");
      }

      // verify the required parameter 'associateType' is set
      if (associateType === undefined || associateType === null) {
        throw new Error("Missing the required parameter 'associateType' when calling searchInventory28");
      }


      var pathParams = {
        'apikey': apikey,
        'userId': userId,
        'associateType': associateType
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/getAssociates/{userId}/{associateType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory29 operation.
     * @callback module:api/Not_hereApi~searchInventory29Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the OAuth2 authentication process zzz
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Number} apikey Your APIKEY
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/Not_hereApi~searchInventory29Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory29 = function(apikey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory29");
      }


      var pathParams = {
        'apikey': apikey
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/sendmail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory291 operation.
     * @callback module:api/Not_hereApi~searchInventory291Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the OAuth2 authentication process zzz
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Number} apikey Your APIKEY
     * @param {Number} userId ID of pet to update
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/Not_hereApi~searchInventory291Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory291 = function(apikey, userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory291");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling searchInventory291");
      }


      var pathParams = {
        'apikey': apikey,
        'userId': userId
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/getXUser/get/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory2b operation.
     * @callback module:api/Not_hereApi~searchInventory2bCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the OAuth2 authentication process zzz
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Number} apikey Your APIKEY
     * @param {Number} groupId ID of pet to update
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/Not_hereApi~searchInventory2bCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory2b = function(apikey, groupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory2b");
      }

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling searchInventory2b");
      }


      var pathParams = {
        'apikey': apikey,
        'groupId': groupId
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/getXGroupMembers/get/{groupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory2c operation.
     * @callback module:api/Not_hereApi~searchInventory2cCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the OAuth2 authentication process zzz
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Number} apikey Your APIKEY
     * @param {Number} groupId ID of pet to update
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/Not_hereApi~searchInventory2cCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory2c = function(apikey, groupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory2c");
      }

      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling searchInventory2c");
      }


      var pathParams = {
        'apikey': apikey,
        'groupId': groupId
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/getXUserAssociates/get/{groupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory2d operation.
     * @callback module:api/Not_hereApi~searchInventory2dCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the OAuth2 authentication process zzz
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Number} apikey Your APIKEY
     * @param {Number} userId ID of pet to update
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/Not_hereApi~searchInventory2dCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory2d = function(apikey, userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory2d");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling searchInventory2d");
      }


      var pathParams = {
        'apikey': apikey,
        'userId': userId
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/getXUserAffiliates/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory2e operation.
     * @callback module:api/Not_hereApi~searchInventory2eCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the OAuth2 authentication process zzz
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Number} apikey Your APIKEY
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/Not_hereApi~searchInventory2eCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory2e = function(apikey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory2e");
      }


      var pathParams = {
        'apikey': apikey
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory2f operation.
     * @callback module:api/Not_hereApi~searchInventory2fCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the OAuth2 authentication process zzz
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Number} apikey Your APIKEY
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/Not_hereApi~searchInventory2fCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory2f = function(apikey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory2f");
      }


      var pathParams = {
        'apikey': apikey
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/email/register', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory2g operation.
     * @callback module:api/Not_hereApi~searchInventory2gCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the OAuth2 authentication process zzz
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Number} apikey Your APIKEY
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/Not_hereApi~searchInventory2gCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory2g = function(apikey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory2g");
      }


      var pathParams = {
        'apikey': apikey
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/email/forgot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory2h operation.
     * @callback module:api/Not_hereApi~searchInventory2hCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the OAuth2 authentication process zzz
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Number} apikey Your APIKEY
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/Not_hereApi~searchInventory2hCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory2h = function(apikey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory2h");
      }


      var pathParams = {
        'apikey': apikey
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/changePassword', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory2i operation.
     * @callback module:api/Not_hereApi~searchInventory2iCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the OAuth2 authentication process zzz
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Number} apikey Your APIKEY
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/Not_hereApi~searchInventory2iCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory2i = function(apikey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory2i");
      }


      var pathParams = {
        'apikey': apikey
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/admin/getUser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory2j operation.
     * @callback module:api/Not_hereApi~searchInventory2jCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the OAuth2 authentication process zzz
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Number} apikey Your APIKEY
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/Not_hereApi~searchInventory2jCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory2j = function(apikey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory2j");
      }


      var pathParams = {
        'apikey': apikey
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/addRelationship', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory2k operation.
     * @callback module:api/Not_hereApi~searchInventory2kCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the OAuth2 authentication process zzz
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Number} apikey Your APIKEY
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/Not_hereApi~searchInventory2kCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory2k = function(apikey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory2k");
      }


      var pathParams = {
        'apikey': apikey
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/removeRelationship', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory2m operation.
     * @callback module:api/Not_hereApi~searchInventory2mCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the OAuth2 authentication process zzz
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Number} apikey Your APIKEY
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/Not_hereApi~searchInventory2mCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory2m = function(apikey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory2m");
      }


      var pathParams = {
        'apikey': apikey
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/getRelationshipTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory2n operation.
     * @callback module:api/Not_hereApi~searchInventory2nCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the OAuth2 authentication process zzz
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Number} apikey Your APIKEY
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/Not_hereApi~searchInventory2nCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory2n = function(apikey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory2n");
      }


      var pathParams = {
        'apikey': apikey
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/addProperty', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory2o operation.
     * @callback module:api/Not_hereApi~searchInventory2oCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the OAuth2 authentication process zzz
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Number} apikey Your APIKEY
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/Not_hereApi~searchInventory2oCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory2o = function(apikey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory2o");
      }


      var pathParams = {
        'apikey': apikey
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/removeProperty', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory2q operation.
     * @callback module:api/Not_hereApi~searchInventory2qCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the OAuth2 authentication process zzz
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Number} apikey Your APIKEY
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/Not_hereApi~searchInventory2qCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory2q = function(apikey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory2q");
      }


      var pathParams = {
        'apikey': apikey
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/getTenants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory2r operation.
     * @callback module:api/Not_hereApi~searchInventory2rCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the OAuth2 authentication process zzz
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Number} apikey Your APIKEY
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/Not_hereApi~searchInventory2rCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory2r = function(apikey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory2r");
      }


      var pathParams = {
        'apikey': apikey
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/getIdentityWithAuthtoken', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory3 operation.
     * @callback module:api/Not_hereApi~searchInventory3Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the OAuth2 authentication process zzz
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Number} apikey Your APIKEY
     * @param {Number} userId ID of pet to update
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/Not_hereApi~searchInventory3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory3 = function(apikey, userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory3");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling searchInventory3");
      }


      var pathParams = {
        'apikey': apikey,
        'userId': userId
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/user/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory3p operation.
     * @callback module:api/Not_hereApi~searchInventory3pCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * check the status of the API server
     * Log out a user. Note that a JWT (JSON Web Token) for the user may still be being used somewhere. For important operations the application should verify that a JWT is still valid.  BROKEN 
     * @param {String} apikey Your APIKEY
     * @param {module:api/Not_hereApi~searchInventory3pCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory3p = function(apikey, callback) {
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory3p");
      }


      var pathParams = {
        'apikey': apikey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/logout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory5 operation.
     * @callback module:api/Not_hereApi~searchInventory5Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the OAuth2 authentication process zzz
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Number} apikey Your APIKEY
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/Not_hereApi~searchInventory5Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory5 = function(apikey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory5");
      }


      var pathParams = {
        'apikey': apikey
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory6 operation.
     * @callback module:api/Not_hereApi~searchInventory6Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the OAuth2 authentication process zzz
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Number} apikey Your APIKEY
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/Not_hereApi~searchInventory6Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventory6 = function(apikey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventory6");
      }


      var pathParams = {
        'apikey': apikey
      };
      var queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventoryzzz3 operation.
     * @callback module:api/Not_hereApi~searchInventoryzzz3Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * check the status of the API server
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {String} apikey Your APIKEY
     * @param {module:api/Not_hereApi~searchInventoryzzz3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.searchInventoryzzz3 = function(apikey, callback) {
      var postBody = null;

      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling searchInventoryzzz3");
      }


      var pathParams = {
        'apikey': apikey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/v1/{apikey}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
