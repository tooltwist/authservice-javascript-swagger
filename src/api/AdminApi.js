/**
 * Authservice
 * Authservice.io provides Authentication and Authorisation services for web based applications. It can also maintain user profile information, relationship between users, and assist with communicating with users by email and SMS. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@authservice.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse200', 'model/InlineResponse406'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse200'), require('../model/InlineResponse406'));
  } else {
    // Browser globals (root is window)
    if (!root.Authservice) {
      root.Authservice = {};
    }
    root.Authservice.AdminApi = factory(root.Authservice.ApiClient, root.Authservice.InlineResponse200, root.Authservice.InlineResponse406);
  }
}(this, function(ApiClient, InlineResponse200, InlineResponse406) {
  'use strict';

  /**
   * Admin service.
   * @module api/AdminApi
   * @version 2.0.0
   */

  /**
   * Constructs a new AdminApi. 
   * @alias module:api/AdminApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the routeHealthcheck operation.
     * @callback module:api/AdminApi~routeHealthcheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the status of the API server
     * This call is used to check that the server is running correctly.  If the server is running correctly, a status of \&quot;green\&quot; is returned with status 200. \\ Note that if there is a problem with the database or cache, this call will still return 200 for the status, but the content of the reply will change. This is necessary to prevent the load balancer from thinking the server is dead, and restarting the server, making it impossible to diagnose the problem. \\ Any monitoring software should check that the status is \&quot;green\&quot;. 
     * @param {module:api/AdminApi~routeHealthcheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.routeHealthcheck = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/healthcheck', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
